===========================
TODO
===========================

make shopping list, and place order

proj_roc
- review
- README.md
- initial commit

put on rpi hat  

code/test gpio.h
- review against bcm spec
- this should also work in the kernel module
- test pull up, down;  and gpio outputs in user mode code, 
  use grove cable to breadboard

proj_roc update
- use ioctl or procfs to enable a test, and disable
- include gpio.h
- monitor gpio output on oscilloscope

motor ctlr
- review setup directions
- attach to laptop, and test without motor
- attach to rpi, and test without motor
- connect motor, and calibrate and test on laptop
- connect motor, and test on rpi

motor encoder
- start with user mode pgm
- add support to roc

i2c devices
- display
- temperature humidity sensor
- inertial measurement

other sensors

relays

buy
- board (or something) to use as a base
- mounting hardware, standoffs
- pin connectors
- longer grove cables
- 18 hookup wire      10amp
- or 20 hookup wire    5amp   (motor is 5.6 amp stall)
- check that I have 22 wire, and put in a bag
- another 6 connector strip, for ground on top
- mouting hardware for sensor and ctlr and rpi boards
- maybe buy 15A circuit breaker
- do I have good size wood screws for mounting
- heat sinks

---------------

bring out oscilloscope

plan what I'll need for hooking up the motors for initial testing
- use battery setup described below
  - pwr rpi from this, and ground the rpi 
  - check usb cable ground, is it rpi ground?
- connect motor ctlr to terminal block, for easier testing
- connect motor ctlr to pc, and do setup
  - prbably first without 12vdc
- test with linux pgm

plan and buy parts for power distribution
- mount them on a small board, leave room for motor ctlrs too
- NOTES
    - 20 awg   5 amp
      18       10
      14       15
    - my battery cable is 12 gauge
- num 12v circuits
  2 motors
  2 rpis
  1 5V  to upper level
  1  battery charger connect 
- num 5v circuits
  N proximity sensors
  i2c displays ?
  relays

realtime
- alloc memory at 1M
- remove 1 cpu
- module will start the removed cpu running code in this region
- TODO - download linux kernel src, and build and install
- before removing the 1 cpu, test this out with the module just
  calling into the region

write realtime demo pgm
- cleanup and checkin this
- study realtime linux considerations   INPROG
   - write pgm that will sleep for 1000nsec in a loop, and keep track of actual sleeptime
   - isolcpus, setaffinity, setrt priority
   - make a timer access .h file
   - what are the commands for getting at the memory mapped register locations
   - is their a problem with the rpi cpu clock slowing down or throttling
   - can real time throttling be eliminated

verify gpio access code against
- bcm2711 spec
- wiringi source code

dbg
- make a backup script
- add i2c capability
- safe_memcpy
- don't use memcpy in RW_MMIO
- funcs, startup should get BCM base address, and use in timer test
- ndisasm

check on my orders, and check mail
- seeed
  - 420017409374869903506330707924   usps in transit
      small order (respeaker, ...)

experiment with i2c 
  run i2cdetect
  i2c graphics interface code

write software for
- mtr_ctlr
- quad_encoder

motor ctlr
- try configurator on Windoes VM
- also try smcg2cmd.exe

can the 12v to 5v power connect the 12v Negative to 5v ground
- break out connector for usb-c power
- search for another 12v to 5v converter for the 5v components, such as IR sensor and relays

make CAD diagram, or a diagram on graph paper

determine weight of robot
- battery
- motors
- chassis

===========================
ROBOT CAPABILITY IDEAS
===========================

- motion, and rotation

- voice command
  - voice recognition and speech
  - commands
    - motion
    - come to me
    - conversation 

- sensors, i2c and grove
  - orientation
  - temperature
  - proximity
  - others ?

- camera
  - pan, zoom, cast to TV
  - voice commands to pan, zoom, and locate object

- extra 
  - leds
  - color organ

===========================
PARTS SUPPLIERS
===========================

Pololu
   https://www.pololu.com

RobotShop
   https://www.robotshop.com

SeeedStudio
   https://www.seeedstudio.com

Amazon

===========================
ROBOT CHASIS
===========================

Suggestion 1: Lowes
  Radius Edge Unfinished Pine Board
  Item #114105Model #L5RND174415S
  High quality pine stain grade round
  Works well in DIY projects like table tops, stools, clocks, and signs
  Finely-sanded stain grade surface

  14.25 inch diameter,  thickness 1 inch

  https://www.lowes.com/pd/Actual-1-in-x-14-25-in-x-1-188-ft-Radius-Edge-Pine-Board/1002719518?cm_mmc=shp-_-c-_-prd-_-mlw-_-google-_-lia-_-122-_-edgegluedpanels-_-1002719518-_-0&placeholder=null&ds_rl=1286981&gclid=CjwKCAiAsaOBBhA4EiwAo0_AnHh-cI3123XLjouCwTEbJBOLDhptTX-62ATxDkbnPJHo1X_96dENDxoChCEQAvD_BwE&gclsrc=aw.ds

Suggestion 2:
  Lightwer Weight than 1" thick wood
  Triangular shape, or similar

===========================
MECHANICAL / MOTORS
===========================

2 motors with quadrature encoders                ORDERED
   - 25D metal gearmotor
   - Pololu item #: 4843
   - voltage                    12 V
   - no-load performance        500 RPM  300 mA
   - stall extrapolation        6 kg⋅cm (85 oz⋅in), 5.6 A 
   - encoder: 980  counts per rev

2 motor controllers,  either usb or i2c          ORDERED
   product   https://www.pololu.com/product/1362`0
   doc       https://www.pololu.com/docs/0J77

2 motor mounts                                   ORDERED

2 wheels  80mm diameter                          ORDERED
    3mm and 4mm round and D shaft

1 caster wheels                                  ORDERED
  for up to 10lb robot

===========================
ELECTRONICS PARTS
===========================

2 Raspberry Pi model 4                           ORDERED
    https://www.amazon.com/gp/product/B0899VXM8F/ref=ox_sc_act_title_2?smid=A3I5MJJ49RUSVZ&psc=1

2 MicroSd card                                   ORDERED
   https://www.amazon.com/gp/product/B07YFG7T8F/ref=ppx_yo_dt_b_search_asin_title?ie=UTF8&psc=1#

2 power supplies, usb c connector                ORDERED 1
    https://www.amazon.com/gp/cart/view.html?ref_=nav_cart

Seeed Parts
- Respeaker HAT                                  ORDERED
     https://wiki.seeedstudio.com/ReSpeaker_4_Mic_Array_for_Raspberry_Pi/
- Grove HAT for RPI,  capabilities needed:       ORDERED
     https://wiki.seeedstudio.com/Grove_Base_Hat_for_Raspberry_Pi/
           6 digital
           4 analog
           3 i2c
           1 pwm
           1 uart

Grove Cables ordered from Amazon and SeeedStudio
- grove cables                                   ORDERED
      https://www.seeedstudio.com/Grove-Universal-4-Pin-Buckled-20cm-Cable-5-PCs-pack.html
      also placed an amazon order: for Cables-Grove - 4 Pin Female Jumper 
              To Grove 4 Pin Conversion Cable (5 Pcs Per Pack)

Sensors, either from Seeed or Polulo
- accelerometer from Seeed                       ORDERED
- temperature / humidity / pressure              ORDERED
     https://www.seeedstudio.com/Grove-Temperature-Humidity-Pressure-and-Gas-Sensor-for-Arduino-BME680.html
- 2 other temperature
- ADC
- OLED display

I2C Expansion
- i2c expansion board for grove                  ORDERED 1 from amazon and 1 from robotshop
     https://www.amazon.com/Grove-I2C-Hub-Port-Cable/dp/B07CW54T2S/ref=sr_1_2?dchild=1&keywords=grove+i2c+hub&qid=1613323453&s=electronics&sr=1-2
            OR
     https://www.robotshop.com/en/grove-i2c-hub-6-port.html             ORDERED

GPIO HAT, saw on Amazon                          ORDERED
   https://www.amazon.com/gp/product/B0876V959B/ref=ox_sc_act_title_4?smid=AJVXCJJFWBFD7&psc=1

GROVE HAT, bought 2nd one on Amazon              ORDERED
   https://www.amazon.com/gp/product/B07LD8C51J/ref=ppx_yo_dt_b_asin_title_o00_s00?ie=UTF8&psc=1

Speaker                                          USE WHAT I HAVE

servo motor                                      LATER

Camera, mounted on pan servo                     LATER
  also zoom

===========================
POWER SUPPLY PARTS
===========================

12 V battery                             
  2 lbs  12V 8AH                                   ORDERED
Charger                                            ORDERED
Cable                                              ORDERED
Fuse with siwtch                                   ORDERED

2 converters for 12V to USB-C                      ORDERED
   12V to 5V DC USB Type-C Right Angle Step-Down Power Converter, Buck Converter,
   15W Output, 3A at 5V USB Type-C Power Supply, Waterproof (12V to 5V USB-C Power Converter)
  https://www.amazon.com/gp/product/B086KTGRH1/ref=ox_sc_act_title_1?smid=A3OL48EYOMUID7&psc=1

12v to 5vdc converter                              ORDERED
  https://www.amazon.com/gp/product/B00J3MHRNO/ref=ppx_yo_dt_b_asin_title_o00_s00?ie=UTF8&psc=1

alternate power for rpi...                         MAYBE LATER
https://vilros.com/products/10-000mah-portable-power-supply-for-raspberry-pi?variant=32002533556318&currency=USD&utm_medium=product_sync&utm_source=google&utm_content=sag_organic&utm_campaign=sag_organic&gclid=CjwKCAiAjp6BBhAIEiwAkO9WuvWw6wfrs-4rUlg9dYt_w-F0c-7BhGa9sFONy9GJOnmdizK6hQ9fHhoCH1QQAvD_BwE

===========================
SENSORS SUMMARY
===========================

SeeedStudio Sensor Search Link
------------------------------
  https://www.seeedstudio.com/category/Sensor-for-Grove-c-24.html?p=5&product_list_stock=3

SeeedStudio
-----------
Grove - Temperature, Humidity, Pressure and Gas Sensor for Arduino - BME680
   https://www.seeedstudio.com/Grove-Temperature-Humidity-Pressure-and-Gas-Sensor-for-Arduino-BME680.html
   5v or 3.3v
   0x76 default, or 0x77

Grove - AHT20 I2C Industrial Grade Temperature and Humidity Sensor
   https://www.seeedstudio.com/Grove-AHT20-I2C-Industrial-grade-temperature-and-humidity-sensor-p-4497.html
   2.0 - 5.5v
   i2c 0x38

Grove - IMU 10DOF v2.0 (MPU2950)
   https://www.seeedstudio.com/Grove-IMU-10DOF-v2-0.html
   5V / 3.3V  6mA

Grove - I2C High Accuracy Temperature Sensor - MCP9808
  https://www.seeedstudio.com/Grove-I2C-High-Accuracy-Temperature-Sensor-MCP9808.html
  5v or 3.3v
  0x18 to 0x1f

Amazon
------
Grove I2C 4 Ch / 16 Bit Analog to Digital Converter for Raspberry Pi/Arduino / ESP8266
  https://www.amazon.com/gp/product/B01FPZ1UXA/ref=ox_sc_act_title_1?smid=A10D5R7WDF6NR9&psc=1
    Works Perfectly with the Pi2Grover Grove Interface to the Raspberry Pi
  https://shop.switchdoc.com/products/grove-4-channel-16-bit-analog-to-digital-converter
  http://www.switchdoc.com/wp-content/uploads/2016/05/Grove4ChADC_CurrentSpecification.pdf
    Supports both 3.3V and 5V I2C
    addr 0x48,49,4a,4b

DSD TECH 2 PCS IIC OLED Display 0.91 Inch for Arduino ARM
 https://www.amazon.com/gp/product/B07D9H83R4/ref=ox_sc_act_title_1?smid=AFLYC5O31PGVX&psc=1
 The main chip is SSD1306; supports DC 3.3V to 5.0V supply. Working Temperature: -30 degrees ~ 70 degree
  https://www.raspberrypi-spy.co.uk/2018/04/i2c-oled-display-module-with-raspberry-pi/

Pololu (relay and sensor)
-------------------------
Pololu Relay          ORDERED
  2.5V enables
  rpi gpio
     VIL=0.8V means that if the output is Low it will be <= 0.8V.
     VIL=1.3V means that if the output is High it will be >= 1.3V
straight 0.1" male header for the control connections

Pololu 38 kHz IR Proximity Sensor, Fixed Gain, High Brightness          ORDERED
   boltage divider
   https://www.raspberrypi.org/forums/viewtopic.php?t=209958

===========================
POLOLU SIMPLE MOTOR CONTROLLER
===========================

https://www.pololu.com/product/1362

User's Guide
  html:  https://www.pololu.com/docs/0J77
  pdf:   https://www.pololu.com/docs/pdf/0J77/simple_motor_controller_g2.pdf

Configurator runs only on Windows
   see section:  3.1. Installing Windows drivers and software
   cmdline tool is:   smcg2cmd.exe

install windoes drivers and software,  sect 3.1
  The SMC G2’s native USB interface implements Microsoft OS 2.0 Descriptors, 
  so it will work on Windows 8.1 or later without needing any drivers. 
  The USB serial ports will work on Windows 10 or later without drivers.

The Simple Motor Control Center G2 is a graphical user interface (GUI) for configuring the
controller, viewing its status, and controlling it manually. You can find the configuration 
utility in your Start Menu by searching for it or looking in the Pololu folder.

The Simple Motor Controller G2 Command-line Utility (smcg2cmd) is a command-line utility
that can do most of what the GUI can do, and more. You can open a Command Prompt and
type smcg2cmd with no arguments to see a summary of its options.

Tips:
- Make your motor leads as thick and as short as possible, and 
- Twist them around each other. 
- It is also beneficial to do this with your power supply leads.
- Running GUI ...
  . As a first step, we recommend that you click “Quick input setup…”
  . The easiest way to set the “Current offset calibration” setting is to connect power 
    to VIN, make sure the motor is stopped, and then click the “Measure” button to 
    measure the offset and automatically change the setting.
- Brake duration is the time, in milliseconds, that the motor controller will spend 
  braking the motor (current speed = 0) before allowing the current speed to change 
  signs. The forward brake duration is the braking time required before switching from 
  forward to reverse (from positive to negative speeds). The reverse brake duration is 
  the braking time required before switching from reverse to forward (from
  negative to positive speeds).

----------------
--- commands ---
----------------

exit safe start
   0x83

motor forward  0x85 speedbyte1  speedbyte2
  speed is 0 - 3200
    byte 1  low 5 bits          
    byte 2  upper 7 bits
    example: 0 100  is full speed

motor reverse  0x86

motor brake, causes immedeate brake or coast, ignoring deccel limits
   0x92 0x00   coast
   0x92 0x20   brake

get variable
  0xa1  <variable_id>     RESPONSE:   lowbyte, highbyte
       (see section 6.4)

    value = variable_low_byte + 256 * variable_high_byte

    If the variable type is signed and the above result is greater than 32767, you will need to subtract
    65536 from the result to obtain the correct, signed value. Alternatively, if it is supported by the
    language you are using, you can cast the result to a signed 16-bit data type.

    0   error status                        (errors that are currently stopping the motor)
    1   errors occurred since last cleared  (reading clears)
    2   serial errors occurred
    3   limit status                        (conditions limitting the motor ctlr)
  127   source of last reset

   20  target speed
   21  current speed
   22  breake amunt
   23  input voltage
   24 temp A
   25 temp B
   27 baud rate
   28,29  uptime low, high    (ms, 65536 ms)

   30 max speed forwared
   31 max accel forward
   32 max decel forward
   33 brake duration forwared (when transitioning from forward to reverse)
   34 starting speed forward

   36 max speed reverse
   37 max accel reverse
   38 max decel reverse
   39 brake duration reverse (when transitioning from reverse to forward)
   40 starting speed reverse

   42 current limit  (section 5.2, internal units)
   43 raw current   (section 5.2, internal units)
   44 current  mA
   45 current limitting consecutive count  number of consecutinve 20 ms periods when current limit is active
   46 current limitting occurence count  number of consecutinve 20 ms periods when current limit is active
                                         since last cleared

set motor limit
    0xa2   limitID  byte1  byte2     RESPONSE   response_code_byte
      (see secton 6.4)

       the first of which (limit byte 1) contains the
       low seven bits of the value and the second 
         (limit byte 2) contains the high seven bits.

         4 - max speed forwared   0-3200
         5 - max accel forward    0-3200 (0=nolimit) = deltaspeed per update period
         6 - max decel forward    0-3200 (0=nolimit) = deltaspeed per update period
         7 - brake dur forward    0-16384  units=4ms   (note: get variable units is 1ms)
         8 - max speed forwared   0-3200
         9 - max accel forward    0-3200 (0=nolimit) = deltaspeed per update period
         10- max decel forward    0-3200 (0=nolimit) = deltaspeed per update period
         11- brake dur forward    0-16384  units=4ms   (note: get variable units is 1ms)

       response code
         0 - okay
         1 - unable to set forwared limit
         2 - unable to set reverse limit
         3 - unable to set forward and reverse limit

set current limit
  0x91  byte1  byte2     see section 5.2
     these bytes are 7 bit values

get firmware version
   0xc1   respone  bytes 1-4    
     product-id low byte
     product-id high byte
     minor fw version BCD
     major fw version  BCD

stop motor : target_speed=0, observes decel limits, safe_start_violation=true
   0xe0

===========================
QUADRATURE ENCODER
===========================

https://cdn.sparkfun.com/datasheets/Robotics/How%20to%20use%20a%20quadrature%20encoder.pdf

===========================
GIT TIPS
===========================

Git Tags
 - git tag                          : lists available tags
 - git tag -a v1.0 -m 'version 1.0' : create annotated tag
 - git tag -a v1.0 9fceb02          : tagging an existing commit
 - git push origin --tags           : tags are not pushed by default
 - git checkout -b ver1.0 v1.0      : create a branch at a tag
 - git show v1.0                    : show the tag and associated commit

How to list tracked files
 - git ls-tree -r master --name-only

Create a private repo
- On server system, create bare repository:
    cd ~/proj/private_git_repos
    mkdir $name.git
    cd $name.git
    git init --bare

- On client, populate the directory and push
    cd ~/proj
    mkdir $name
    cd $name    
    git init
    git add *
    git commit -m "initial commit"
    git remote add origin haid@home:proj/private_git_repos/$name.git
    git push -u origin master

===========================
RPI - INSTALL
===========================

Download OS 
- https://www.raspberrypi.org/software/operating-systems/
- Raspberry Pi OS Lite
    Release date: January 11th 2021
    Kernel version: 5.4
    Size: 438MB
    Show SHA256 file integrity hash: d49d6fab1b8e533f7efc40416e98ec16019b9c034bc89c59b83d0921c2aefeef

Use dd to copy the .img file to micro-sd card

Run rasp-config to set:
- system options -> wireless lan
- system options -> hostname
- interfaces     -> ssh enable
- localization   -> TZ America, New York

Reboot, login, 
- confirm IP address is set on wlan0
- make the IP address static in router settings
- add IP address to /etc/hosts on home computer
    192.168.1.145    robot-ctlr
    192.168.1.44     robot-intfc

Upgrade:
- apt update
- apt upgrade
- reboot

configure system
- passwd    # change the passwd of the 'pi' user
- adduser haid
- EDITOR=vi visudo
       haid    ALL=(ALL) NOPASSWD: ALL
- apt install git vim cscope ctags apt-file libreadline-dev raspberrypi-kernel-headers
- apt-file update

configure my account
- on home
    cd ~/.ssh
    host=robot-ctlr
    ssh $host mkdir .ssh
    scp id_rsa.pub $host:.ssh/authorized_keys
    scp config id_rsa id_rsa.pub  $host:.ssh
- on rpi ...
  * add the following to .bashrc
        # HAID ADDITIONS
        ulimit -c unlimited
        alias bashrc='source ~/.bashrc'
        alias profile='source ~/.profile'
        alias ls='ls -l --color=always --group-directories-first --human-readable'
        alias cscope='/usr/bin/cscope -d'
        alias cscope_init='rm -f cscope.out tags; /usr/bin/cscope -bR; ctags -R'
        alias pr='cd ~/proj/proj_robot'
        alias pdbg='cd ~/proj/proj_dbg'
        HISTCONTROL=""
        export EDITOR=vim
  * .vimrc
        source /usr/share/vim/vim81/defaults.vim
        " tabs
        set expandtab
        set tabstop=8
        set softtabstop=4
        set shiftwidth=4
        " enable copy and paste out of vim
        set mouse=r
        " disable autoinent
        set nocindent
        set nosmartindent
        set noautoindent
        set indentexpr=
        filetype indent off
        filetype plugin indent off
        " highlight search
        set hlsearch
        " disable show next match while entering a search
        set noincsearch
  * make git directories
        mkdir proj
        cd proj
        git clone haid@home:proj/private_git_repos/proj_dbg.git
        git clone git@github.com:sthaid/proj_robot.git
  * build and install dbg
  * bin/run_dbg
        sudo ~/proj/proj_dbg/dbg/dbg -r ~/proj/proj_dbg/dbg/funcs
  * configure git    
        git config --global user.name "Steven Haid"
        git config --global user.email stevenhaid@gmail.com
        git config -l

===========================
RPI - GPIO HEADER
===========================

Overview of GPIO
  https://roboticsbackend.com/raspberry-pi-3-pins/#:~:text=The%20Raspberry%20Pi%204%20board,guide%20applies%20to%20both%20versions.

WiringPi
  http://wiringpi.com/reference/

3.3v for gpio input pins is required, do not exceed
- can use voltage divider to reduce 5V to 3.3V
  . https://www.raspberrypi.org/forums/viewtopic.php?t=209958
  . suggests 10K + 20K,  for low frequency signals

The operating voltage of the GPIO pins is 3.3v with a maximum current draw of 16mA. 
This means that we can safely power one or two LEDs (Light Emitting Diodes) from a 
single GPIO pin, via a resistor.
  - https://www.raspberrypi.org/forums/viewtopic.php?t=151871
  - 16 mA max per pin
  - 100 mA max total

5v Power
  - Physical/Board pin 2 ??
  - The 5v power pins are connected directly to the Pi's power input and will capably 
    provide the full current of your mains adaptor, less that used by the Pi itself.
  - With a decent power supply, such as the official 3A adapter on the Pi 4, you can 
    expect to pull about 1A to 2A.

===========================
RPI - I2C
===========================

Tutorial:
  https://www.robot-electronics.co.uk/i2c-tutorial

RPI has 1.8K resistors on i2c lines  (probably)
  https://www.raspberrypi.org/forums/viewtopic.php?t=7664

i2c Broadcom bug
- https://github.com/raspberrypi/linux/issues/254
- this bug is from 2013, so I guess it should be fixed by now

Configure I2c on RPI
- https://learn.adafruit.com/adafruits-raspberry-pi-lesson-4-gpio-setup/configuring-i2c
- Enable i2c using raspi-config
- Verify /dev/i2c-* exists
- add user to i2c group:  
   sudo usermod -a -G i2c haid
   logout and back in
   groups
- i2cdetect -y 1

===========================
RPI - REAL TIME PERFORMANCE TIPS
===========================

https://www.raspberrypi.org/forums/viewtopic.php?t=228727
- refer to code.tgz
- suggestions:
   . /boot/cmdline.txt   isolcpus=3
   . disable turbo mode  ?
   . set affinity
   . set real time
- also may have exmple of timer code

https://www.raspberrypi.org/forums/viewtopic.php?f=29&t=216051&p=1599557&sid=2149ef600151289ddf095fdc3ebd69c5#p1599557
    int prio = sched_get_priority_max(SCHED_FIFO);
    struct sched_param param;
    param.sched_priority = prio;
    sched_setscheduler(0,SCHED_FIFO,&param);

    // This permits realtime processes to use 100% of a CPU, but on a
    // RPi that starves the kernel. Without this there are latencies
    // up to 50 MILLISECONDS.
    system("echo -1 >/proc/sys/kernel/sched_rt_runtime_us");

    The downside is that this will starve other processes, including 
    essential kernel threads. If you just do a tight loop toggling 
    GPIO pins that will be a problem, even on a multi-core RPi 3B+. 
    But if your loop does a blocking read or write of an SPI or I2C 
    device, all is well. Calling usleep() also works, but it can have 
    latencies up to 50 microseconds.

    According to https://www.iot-programmer.com/index.ph ... ?showall=1 
    the 50 ms latency disappears when having a properly configured 
    multi-core PI. In that post, however, the priority is set to 1, 
    instead of sched_get_priority_max(SCHED_FIFO), presumably 99.

https://www.raspberrypi.org/forums/viewtopic.php?t=52393
  see example1.c,  timer and gpio mapping

https://mindplusplus.wordpress.com/2013/05/21/accessing-the-raspberry-pis-1mhz-timer/
  mapping the broadcom timer

https://www.raspberrypi.org/forums/viewtopic.php?t=244031
- gpio memory mapped example code
- rpi memory layout
    /proc/device-tree/soc/ranges
    cat /proc/iomem
    xxd -ps -c250 /proc/device-tree/soc/ranges
    bcm_host_get_peripheral_address() functionA

    Internally, all of the peripherals are in a 16mb chunk starting 
    at 0x7e00_0000 on pi1/pi0, that 16mb block was mapped to 0x2000_0000
    pi2/pi3, 0x3f00_0000 and pi4 in low-peripherals mode, 0xfe00_0000

    in all cases, you need to map it over, so subtract off the 0x7e..., 
    then add back in the offset for your specific model

    but beware, the rpi4 has a couple new peripherals below the old 
    0x7e00_0000 addr, mainly pci-e and gigabit ethernet, but you 
    shouldnt be touching them if linux is active

https://www.raspberrypi.org/forums/viewtopic.php?t=283456
- more suggestions on getting base addresses 
  . dtc -I fs /proc/device-tree | less
  . dmesg | grep gpio
  . $ echo /proc/device-tree/soc/gpio@*
    /proc/device-tree/soc/gpio@7e200000
    $ hexdump -C /proc/device-tree/soc/gpiomem/reg 
    00000000  7e 20 00 00 00 00 10 00

find the address of the broadcom 
        FILE *f = fopen("/proc/cpuinfo","r");
        char buf[1024];
        fgets(buf,sizeof(buf),f); // skip first line
        fgets(buf,sizeof(buf),f); // model name
        if(strstr(buf,"ARMv6")) {
                phys = 0x20000000;
        } else if(strstr(buf,"ARMv7")) {
                phys = 0x3F000000;
        } else if(strstr(buf,"ARMv8")) {
                phys = 0x3F000000;
        } else {
                fprintf(stderr,"Unknown CPU type\n");
                exit(1);
        }

verify cpus isolated
  cat /sys/devices/system/cpu/isolated
  cat /sys/devices/system/cpu/present

===========================
RPI - GENERAL TIPS
===========================

apt examples
- apt update   - download package information from all configured sources
- apt upgrade

- apt install apt-file
- apt-file update
- apt-file search <filename> - locates packages(s) that provide filename
                               (aka apt-file find)

- apt search   - search for a package
- apt install
- apt remove
- apt autoremove - remove packages that are no longer needed as dependencies changed

building kernel modules
- apt install raspberrypi-kernel-headers

adjusting kernel settings at boot time
- /boot/config.txt
- /boot/cmdline.txt

cscope and tags
- setup
    rm cscope.out; rm tags
    /usr/bin/cscope -bR
    ctags -R
- running cscope, -d is do not build xref
    cscope -d

===========================
MOTOR SETUP
===========================

Wires
-----
- Red, Black    : Power
- Green         : Encoder Gnd
- Blue          : Encoder Vcc 3.5 - 20 V
- Yellow, White : Encoder Output      THESE WILL PROBABLY NEED A VOLTAGE DIVIDER

Settings
--------

Input 
- Enable CRC commands
- Enable CRC responses

Motor
- Max Speed    :  3200
- Start Speed  :  0
- Max Accel    :  10       = 0 to full speed in 320 ms
- Max Deccel   :  10
- Brake Dur    :  1000  ms = 1sec

- Current      :  5.5
- Measure Current Offset Cal with Motor Voltage Off

Advanced
- Low Vin Shutoff    9.5
- Low Vin Startup   10.5
- High Vin Shutoff  15
- Learn with Vin set to approx 12V
